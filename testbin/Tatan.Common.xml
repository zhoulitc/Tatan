<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tatan.Common</name>
    </assembly>
    <members>
        <member name="T:Tatan.Common.Collections.AbstractReadOnlyCollection`1">
            <summary>
            只读抽象集合
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Tatan.Common.ICountable">
            <summary>
            可计数接口
            </summary>
        </member>
        <member name="P:Tatan.Common.ICountable.Count">
            <summary>
            获取可计数对象的计数值
            </summary>
        </member>
        <member name="M:Tatan.Common.Collections.AbstractReadOnlyCollection`1.Contains(`0)">
            <summary>
            确定集合是否包含指定项
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Collections.AbstractReadOnlyCollection`1.GetEnumerator">
            <summary>
            获取此集合的迭代
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tatan.Common.Collections.AbstractReadOnlyCollection`1.Count">
            <summary>
            获取集合中对象个数
            </summary>
        </member>
        <member name="T:Tatan.Common.Collections.ReadOnlyCollection`1">
            <summary>
            只读集合
            </summary>
        </member>
        <member name="M:Tatan.Common.Collections.ReadOnlyCollection`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tatan.Common.Collections.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Tatan.Common.Collections.ReadOnlyCollection`1.Contains(System.String)">
            <summary>
            确定集合是否包含指定项
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Collections.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            获取此集合的迭代
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tatan.Common.Collections.ReadOnlyCollection`1.Count">
            <summary>
            获取集合中对象个数
            </summary>
        </member>
        <member name="T:Tatan.Common.Collections.PropertyCollection">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="M:Tatan.Common.Collections.PropertyCollection.#ctor(System.Type,System.String[])">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
            <param name="names"></param>
            <exception cref="T:System.ArgumentNullException">类型为空时抛出</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个有指定名称且与指定绑定约束匹配的属性时抛出</exception>
        </member>
        <member name="M:Tatan.Common.Collections.PropertyCollection.IsString(System.String)">
            <summary>
            判断属性集合中某个属性是否为字符串类型
            </summary>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException">参数为空时抛出</exception>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Collections.PropertyCollection.Dispose">
            <summary>
            销毁属性集合
            </summary>
        </member>
        <member name="P:Tatan.Common.Collections.PropertyCollection.Item(System.Object,System.String)">
            <summary>
            获取或设置属性集合中的某个属性值
            </summary>
            <param name="instance"></param>
            <param name="name"></param>
            <exception cref="T:System.ArgumentNullException">参数为空时抛出</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">键未找到时抛出</exception>
            <returns></returns>
        </member>
        <member name="T:Tatan.Common.ExpressionParser">
            <summary>
            表达数解析器
            </summary>
        </member>
        <member name="M:Tatan.Common.ExpressionParser.Parse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            解析一个判断表达数，返回判断字符串
            </summary>
            <param name="expression"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.ExpressionParser.Parse(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            解析一个赋值表达式，返回赋值字符串
            </summary>
            <param name="sets"></param>
            <returns></returns>
        </member>
        <member name="T:Tatan.Common.IDentifiable">
            <summary>
            可识别的对象接口
            </summary>
        </member>
        <member name="T:Tatan.Common.IDentifiable`1">
            <summary>
            可识别的对象接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Tatan.Common.IDentifiable`1.Id">
            <summary>
            获取对象的唯一标识符
            </summary>
        </member>
        <member name="T:Tatan.Common.IO.Path">
            <summary>
            通用Path操作
            </summary>
        </member>
        <member name="M:Tatan.Common.IO.Path.GetRootDirectory">
            <summary>
            运行时根目录
            </summary>
            <exception cref="T:System.AppDomainUnloadedException">应用程序域被卸载时</exception>
            <exception cref="T:System.Security.SecurityException">没有权限时</exception>
            <exception cref="T:System.IO.IOException">发生I/O错误时</exception>
        </member>
        <member name="P:Tatan.Common.IO.Path.Separator">
            <summary>
            获取平台分隔符
            </summary>
        </member>
        <member name="T:Tatan.Common.IReplicable`1">
            <summary>
            可复制的对象接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Tatan.Common.IReplicable`1.Clone">
            <summary>
            浅拷贝对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.IReplicable`1.Copy">
            <summary>
            深拷贝对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tatan.Common.Configuration.ConfigFactory">
            <summary>
            配置文件工厂
            </summary>
        </member>
        <member name="M:Tatan.Common.Configuration.ConfigFactory.GetXmlConfig``1(System.String)">
            <summary>
            获取配置文件
            <para>请使用System.Xml.Serialization空间中的特性标明</para>
            </summary>
            <typeparam name="T">具体的配置文件类型</typeparam>
            <param name="fileName">XML配置文件名</param>
            <exception cref="T:System.ArgumentException">文件路径包含非法字符时</exception>
            <exception cref="T:System.ArgumentNullException">传入参数为空时</exception>
            <exception cref="T:System.IO.PathTooLongException">文件路径或者文件名超长时</exception>
            <exception cref="T:System.IO.FileNotFoundException">文件没有找到时</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">目录没有找到时</exception>
            <exception cref="T:System.UnauthorizedAccessException">访问失败时</exception>
            <exception cref="T:System.IO.IOException">发生I/O错误时</exception>
            <exception cref="T:System.NotSupportedException">文件格式无效时</exception>
            <exception cref="T:System.Security.SecurityException">没有权限时</exception>
            <exception cref="T:System.Text.DecoderExceptionFallback">回退时</exception>
            <returns>配置文件对象</returns>
        </member>
        <member name="T:Tatan.Common.Cryptography.CipherFactory">
            <summary>
            密码学工厂
            </summary>
        </member>
        <member name="M:Tatan.Common.Cryptography.CipherFactory.GetCipher(System.String)">
            <summary>
            获取加密解密算法类
            </summary>
            <param name="type">算法名称</param>
            <returns></returns>
        </member>
        <member name="T:Tatan.Common.Cryptography.ICipher">
            <summary>
            密码加解密接口
            </summary>
        </member>
        <member name="M:Tatan.Common.Cryptography.ICipher.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            加密
            </summary>
            <param name="expressly">明文</param>
            <param name="encoding">字符编码</param>
            <exception cref="T:System.ArgumentNullException">当expressly为null时</exception>
            <exception cref="T:System.Text.EncoderFallbackException">字符编码出错，发生回退时</exception>
            <exception cref="T:System.Exception">其他异常发生时</exception>
            <returns>密文</returns>
        </member>
        <member name="M:Tatan.Common.Cryptography.ICipher.Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            加密
            </summary>
            <param name="expressly">明文</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <exception cref="T:System.ArgumentNullException">当expressly为null时</exception>
            <exception cref="T:System.Text.EncoderFallbackException">字符编码出错，发生回退时</exception>
            <exception cref="T:System.Exception">其他异常发生时</exception>
            <returns>密文</returns>
        </member>
        <member name="M:Tatan.Common.Cryptography.ICipher.Decrypt(System.String,System.Text.Encoding)">
            <summary>
            解密
            </summary>
            <param name="ciphertext">密文</param>
            <param name="encoding">字符编码</param>
            <exception cref="T:System.ArgumentNullException">当ciphertext为null时</exception>
            <exception cref="T:System.Text.EncoderFallbackException">字符编码出错，发生回退时</exception>
            <exception cref="T:System.Exception">其他异常发生时</exception>
            <returns>明文</returns>
        </member>
        <member name="M:Tatan.Common.Cryptography.ICipher.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            解密
            </summary>
            <param name="ciphertext">密文</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码</param>
            <exception cref="T:System.ArgumentNullException">当ciphertext为null时</exception>
            <exception cref="T:System.Text.EncoderFallbackException">字符编码出错，发生回退时</exception>
            <exception cref="T:System.Exception">其他异常发生时</exception>
            <returns>明文</returns>
        </member>
        <member name="T:Tatan.Common.Cryptography.Internal.AsymmetricCipher">
            <summary>
            非对称密码抽象类
            </summary>
        </member>
        <member name="T:Tatan.Common.Cryptography.Internal.SymmetricCipher">
            <summary>
            对称密码抽象类
            </summary>
        </member>
        <member name="T:Tatan.Common.Extension.String.Convert.Convert">
            <summary>
            提供字符串的转换扩展方法
            <para>此方法组不会抛出异常</para>
            </summary>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsBoolean(System.String,System.Boolean)">
            <summary>
            转换为Boolean，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsDateTime(System.String,System.DateTime)">
            <summary>
            转换为DateTime，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsDecimal(System.String,System.Decimal)">
            <summary>
            转换为Decimal，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>Decimal</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsDouble(System.String,System.Double)">
            <summary>
            转换为Double，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>Double</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsFloat(System.String,System.Single)">
            <summary>
            转换为Float，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>Float</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsByte(System.String,System.Byte)">
            <summary>
            转换为Byte，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>Byte</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsShort(System.String,System.Int16)">
            <summary>
            转换为Short，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>Short</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsInt(System.String,System.Int32)">
            <summary>
            转换为Int，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>Int</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsLong(System.String,System.Int64)">
            <summary>
            转换为Long，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>Long</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsSByte(System.String,System.SByte)">
            <summary>
            转换为SByte，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>SByte</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsUShort(System.String,System.UInt16)">
            <summary>
            转换为UShort，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>UShort</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsUInt(System.String,System.UInt32)">
            <summary>
            转换为UInt，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>UInt</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsULong(System.String,System.UInt64)">
            <summary>
            转换为ULong，不会抛出异常。转换失败则返回def
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>ULong</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsGuid(System.String,System.String)">
            <summary>
            转换为Guid，不会抛出异常。转换失败则返回Guid.Empty
            </summary>
            <param name="value"></param>
            <param name="format">格式化方式，默认无</param>
            <returns>Guid</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.AsBytes(System.String,System.Text.Encoding)">
            <summary>
            转换为Bytes，不会抛出异常。转换失败则返回空的Bytes
            </summary>
            <param name="value"></param>
            <param name="encoding">指定转换编码</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Convert.Convert.As``1(System.String,``0)">
            <summary>
            转换为泛型值类型，必须指定def，不会抛出异常。转换失败则返回def
            <para>运用了反射，效率上比特定的转换要慢</para>
            </summary>
            <param name="value"></param>
            <param name="def">默认值</param>
            <returns>泛型值类型</returns>
        </member>
        <member name="T:Tatan.Common.Extension.String.Other.Other">
            <summary>
            提供字符串的其他扩展方法
            <para>此方法组不会抛出异常</para>
            </summary>
        </member>
        <member name="T:Tatan.Common.Extension.String.Regex.RegularExpression">
            <summary>
            提供字符串的正则表达式匹配扩展方法
            </summary>
        </member>
        <member name="M:Tatan.Common.Extension.String.Regex.RegularExpression.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)">
            <summary>
            判断是否匹配
            </summary>
            <param name="value"></param>
            <param name="pattern">匹配模式</param>
            <param name="option">匹配选项</param>
            <param name="start">起始位置</param>
            <exception cref="T:System.ArgumentException">传入模式不合法时</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">参数超出范围时</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">解析超时时</exception>
            <returns>Boolean</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Regex.RegularExpression.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.Int32)">
            <summary>
            获取匹配子串
            </summary>
            <param name="value"></param>
            <param name="pattern">匹配模式</param>
            <param name="option">匹配选项</param>
            <param name="start">起始位置</param>
            <param name="length">搜索长度</param>
            <exception cref="T:System.ArgumentException">传入模式不合法时</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">参数超出范围时</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">解析超时时</exception>
            <returns>匹配的字符串</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Regex.RegularExpression.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)">
            <summary>
            获取匹配子串集合
            </summary>
            <param name="value"></param>
            <param name="pattern">匹配模式</param>
            <param name="option">匹配选项</param>
            <param name="start">起始位置</param>
            <exception cref="T:System.ArgumentException">传入模式不合法时</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">参数超出范围时</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">解析超时时</exception>
            <returns>匹配的字符串集合</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Regex.RegularExpression.IsInt(System.String)">
            <summary>
            字符串是否为整数
            </summary>
            <param name="value"></param>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">解析超时时</exception>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Regex.RegularExpression.IsUInt(System.String)">
            <summary>
            字符串是否为正整数
            </summary>
            <param name="value"></param>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">解析超时时</exception>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Regex.RegularExpression.IsNumber(System.String)">
            <summary>
            字符串是否为数字
            </summary>
            <param name="value"></param>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">解析超时时</exception>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Regex.RegularExpression.IsBool(System.String)">
            <summary>
            字符串是否为布尔
            </summary>
            <param name="value"></param>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">解析超时时</exception>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Regex.RegularExpression.IsDateTime(System.String)">
            <summary>
            字符串是否为时间
            </summary>
            <param name="value"></param>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">解析超时时</exception>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Regex.RegularExpression.IsDateTimeOffset(System.String)">
            <summary>
            字符串是否为时间
            </summary>
            <param name="value"></param>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">解析超时时</exception>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Regex.RegularExpression.IsEmail(System.String)">
            <summary>
            字符串是否为邮箱
            </summary>
            <param name="value"></param>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">解析超时时</exception>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Regex.RegularExpression.IsPhone(System.String)">
            <summary>
            字符串是否为电话
            </summary>
            <param name="value"></param>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">解析超时时</exception>
            <returns></returns>
        </member>
        <member name="T:Tatan.Common.Exception.ExceptionHandler">
            <summary>
            异常处理类，保存Exception的数据
            </summary>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.GetText(System.String,System.String)">
            <summary>
            获取异常文本
            </summary>
            <param name="key">唯一键</param>
            <param name="culture">区域</param>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.Argument">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.ArgumentNull(System.String,System.String)">
            <summary>
            参数为空
            </summary>
            <param name="argName"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.ArgumentNull(System.String,System.Object)">
            <summary>
            参数为空
            </summary>
            <param name="argName"></param>
            <param name="arg"></param>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.KeyNotFound``1(``0)">
            <summary>
            键不存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.KeyNotFound``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>
            键不存在
            </summary>
            <typeparam name="T"></typeparam>
            <param name="map"></param>
            <param name="key"></param>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.IndexOutOfRange(System.Int32)">
            <summary>
            索引越界
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.IndexOutOfRange(System.Int32,System.Int32)">
            <summary>
            索引越界
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.NotSupported">
            <summary>
            不支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.DirectoryNotFound(System.String)">
            <summary>
            目录不存在
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.FileNotFound(System.String)">
            <summary>
            文件不存在
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.IllegalMatch(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            非法匹配
            </summary>
            <param name="regex"></param>
            <param name="input"></param>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.DatabaseError(System.Exception)">
            <summary>
            数据库错误
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.DuplicateRecords">
            <summary>
            重复记录
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Tatan.Common.Exception.ExceptionHandler.NotExistRecords">
            <summary>
            不存在此记录
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Tatan.Common.I18n.Languages">
            <summary>
            多语言国际化处理
            </summary>
        </member>
        <member name="M:Tatan.Common.I18n.Languages.#ctor(System.String)">
            <summary>
            构造一类XML的多语言方案
            </summary>
            <param name="directory">语言xml文件格式</param>
            <exception cref="T:System.ArgumentNullException">参数为空时</exception>
        </member>
        <member name="M:Tatan.Common.I18n.Languages.Reload(System.String)">
            <summary>
            重新载入某个区域的语言信息
            </summary>
            <param name="culture">区域</param>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.I18n.Languages.GetText(System.String,System.String)">
            <summary>
            获取异常文本
            </summary>
            <param name="key">唯一键</param>
            <param name="culture">区域</param>
            <returns></returns>
        </member>
        <member name="T:Tatan.Common.IO.File">
            <summary>
            通用File操作，用于处理System.IO.File中返回值为IDispose借口对象的方法
            </summary>
        </member>
        <member name="M:Tatan.Common.IO.File.AppendText(System.String,System.Action{System.IO.StreamWriter})">
            <summary>
            为指定文件追加数据，追加行为自定
            </summary>
            <param name="path">路径</param>
            <param name="action">追加行为</param>
            <exception cref="T:System.ArgumentNullException">传入参数为空时</exception>
            <exception cref="T:System.ArgumentException">文件路径包含非法字符时</exception>
            <exception cref="T:System.IO.PathTooLongException">文件路径或者文件名超长时</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">目录没有找到时</exception>
            <exception cref="T:System.UnauthorizedAccessException">访问失败时</exception>
            <exception cref="T:System.NotSupportedException">文件格式无效时</exception>
        </member>
        <member name="M:Tatan.Common.IO.File.Create(System.String,System.Action{System.IO.FileStream})">
            <summary>
            创建文件，之后行为自定
            </summary>
            <param name="path">路径</param>
            <param name="action">创建行为</param>
            <exception cref="T:System.ArgumentNullException">传入参数为空时</exception>
            <exception cref="T:System.ArgumentException">文件路径包含非法字符时</exception>
            <exception cref="T:System.IO.PathTooLongException">文件路径或者文件名超长时</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">目录没有找到时</exception>
            <exception cref="T:System.UnauthorizedAccessException">访问失败时</exception>
            <exception cref="T:System.IO.IOException">发生I/O错误时</exception>
            <exception cref="T:System.NotSupportedException">文件格式无效时</exception>
        </member>
        <member name="M:Tatan.Common.IO.File.CreateText(System.String,System.Action{System.IO.StreamWriter})">
            <summary>
            创建文件，并写入内容
            </summary>
            <param name="path">路径</param>
            <param name="action">创建行为</param>
            <exception cref="T:System.ArgumentNullException">传入参数为空时</exception>
            <exception cref="T:System.ArgumentException">文件路径包含非法字符时</exception>
            <exception cref="T:System.IO.PathTooLongException">文件路径或者文件名超长时</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">目录没有找到时</exception>
            <exception cref="T:System.UnauthorizedAccessException">访问失败时</exception>
            <exception cref="T:System.NotSupportedException">文件格式无效时</exception>
        </member>
        <member name="M:Tatan.Common.IO.File.OpenRead(System.String,System.Action{System.IO.FileStream})">
            <summary>
            读取文件
            </summary>
            <param name="path">路径</param>
            <param name="action">读取行为</param>
            <exception cref="T:System.ArgumentNullException">传入参数为空时</exception>
            <exception cref="T:System.ArgumentException">文件路径包含非法字符时</exception>
            <exception cref="T:System.IO.PathTooLongException">文件路径或者文件名超长时</exception>
            <exception cref="T:System.IO.FileNotFoundException">文件没有找到时</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">目录没有找到时</exception>
            <exception cref="T:System.UnauthorizedAccessException">访问失败时</exception>
            <exception cref="T:System.NotSupportedException">文件格式无效时</exception>
        </member>
        <member name="M:Tatan.Common.IO.File.OpenText(System.String,System.Action{System.IO.StreamReader})">
            <summary>
            读取文件,文本方式
            </summary>
            <param name="path">路径</param>
            <param name="action">读取行为</param>
            <exception cref="T:System.ArgumentNullException">传入参数为空时</exception>
            <exception cref="T:System.ArgumentException">文件路径包含非法字符时</exception>
            <exception cref="T:System.IO.PathTooLongException">文件路径或者文件名超长时</exception>
            <exception cref="T:System.IO.FileNotFoundException">文件没有找到时</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">目录没有找到时</exception>
            <exception cref="T:System.UnauthorizedAccessException">访问失败时</exception>
            <exception cref="T:System.NotSupportedException">文件格式无效时</exception>
        </member>
        <member name="M:Tatan.Common.IO.File.OpenWrite(System.String,System.Action{System.IO.FileStream})">
            <summary>
            写入文件
            </summary>
            <param name="path">路径</param>
            <param name="action">写入行为</param>
            <exception cref="T:System.ArgumentNullException">传入参数为空时</exception>
            <exception cref="T:System.ArgumentException">文件路径包含非法字符时</exception>
            <exception cref="T:System.IO.PathTooLongException">文件路径或者文件名超长时</exception>
            <exception cref="T:System.IO.FileNotFoundException">文件没有找到时</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">目录没有找到时</exception>
            <exception cref="T:System.UnauthorizedAccessException">访问失败时</exception>
            <exception cref="T:System.NotSupportedException">文件格式无效时</exception>
        </member>
        <member name="T:Tatan.Common.IO.Directory">
            <summary>
            通用File操作，用于处理System.IO.File中返回值为IDispose借口对象的方法
            </summary>
        </member>
        <member name="M:Tatan.Common.IO.Directory.Copy(System.String,System.String)">
            <summary>
            拷贝文件夹
            </summary>
            <param name="source">源路径</param>
            <param name="destination">目的路径</param>
            <exception cref="T:System.ArgumentNullException">传入参数为空时</exception>
            <exception cref="T:System.ArgumentException">文件路径包含非法字符时</exception>
            <exception cref="T:System.IO.PathTooLongException">文件路径或者文件名超长时</exception>
            <exception cref="T:System.IO.FileNotFoundException">文件没有找到时</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">目录没有找到时</exception>
            <exception cref="T:System.UnauthorizedAccessException">访问失败时</exception>
            <exception cref="T:System.IO.IOException">发生I/O错误时</exception>
            <exception cref="T:System.NotSupportedException">文件格式无效时</exception>
        </member>
        <member name="T:Tatan.Common.Extension.String.Target.Target">
            <summary>
            标签处理
            </summary>
        </member>
        <member name="M:Tatan.Common.Extension.String.Target.Target.Replace(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            替换
            </summary>
            <param name="source">源文本</param>
            <param name="targets">标签映射表</param>
            <returns>输出文本</returns>
        </member>
        <member name="M:Tatan.Common.Extension.String.Target.Target.Replace(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            替换
            </summary>
            <param name="leftMatch">左匹配</param>
            <param name="rightMatch">右匹配</param>
            <param name="source">源文本</param>
            <param name="targets">标签映射表</param>        
            <exception cref="T:System.ArgumentOutOfRangeException">参数超出范围时</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">解析超时时</exception>
            <returns>输出文本</returns>
        </member>
        <member name="T:Tatan.Common.Serialization.ISerializer">
            <summary>
            串行接口，提供序列化和反序列化方法
            </summary>
        </member>
        <member name="M:Tatan.Common.Serialization.ISerializer.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="text">字符串</param>
            <exception cref="T:System.Text.DecoderExceptionFallback">回退时</exception>
            <returns>指定对象</returns>
        </member>
        <member name="M:Tatan.Common.Serialization.ISerializer.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="obj">指定对象</param>
            <exception cref="T:System.ArgumentException">包含无效Unicode码时</exception>
            <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化类型不符合协议规定时</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">正在写入的实例出现问题</exception>
            <exception cref="T:System.ServiceModel.QuotaExceededException">已超出序列化最大数量时</exception>
            <exception cref="T:System.Text.EncoderExceptionFallback">回退时</exception>
            <exception cref="T:System.InvalidOperationException">序列化期间发生错误时</exception>
            <returns>json字符串</returns>
        </member>
        <member name="T:Tatan.Common.Serialization.Serializer">
            <summary>
            串行对象
            </summary>
        </member>
        <member name="M:Tatan.Common.Serialization.Serializer.CreateJsonSerializer(System.Func{System.Object,System.String},System.Func{System.String,System.Object})">
            <summary>
            获取一个使用自定义序列和反序列方式的json串行接口
            </summary>
            <param name="serialize"></param>
            <param name="deserialize"></param>
            <returns></returns>
        </member>
        <member name="M:Tatan.Common.Serialization.Serializer.CreateXmlSerializer(System.Func{System.Object,System.String},System.Func{System.String,System.Object})">
            <summary>
            获取一个使用自定义序列和反序列方式的xml串行接口
            </summary>
            <param name="serialize"></param>
            <param name="deserialize"></param>
            <returns></returns>
        </member>
        <member name="P:Tatan.Common.Serialization.Serializer.Json">
            <summary>
            获取json串行接口
            </summary>
        </member>
        <member name="P:Tatan.Common.Serialization.Serializer.Xml">
            <summary>
            获取xml串行接口
            </summary>
        </member>
        <member name="T:Tatan.Common.Guid">
            <summary>
            操作全局唯一标识符 (GUID)
            </summary>
        </member>
        <member name="M:Tatan.Common.Guid.New(System.String)">
            <summary>
            获取一个新的GUID
            </summary>
            <param name="format">格式化方式
            <para>格式可以为n、d、b、p、x</para>
            <para>n：默认，格式为xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</para>
            <para>d：添加-，格式为xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</para>
            <para>b：外围大括号，格式为{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}</para>
            <para>p：外围小括号，格式为(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)</para>
            <para>x：不常用</para>
            </param>
            <exception cref="T:System.FormatException">非法格式化时</exception>
            <returns>字符串</returns>
        </member>
        <member name="T:Tatan.Common.DFA">
            <summary>
            有穷状态机，默认字符型
            </summary>
        </member>
        <member name="T:Tatan.Common.DFA`1">
            <summary>
            有穷状态机
            </summary>
            <typeparam name="T">token类型</typeparam>
        </member>
        <member name="M:Tatan.Common.DFA`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="capacity">状态个数</param>
        </member>
        <member name="M:Tatan.Common.DFA`1.Finalize">
            <summary>
            析构
            </summary>
        </member>
        <member name="M:Tatan.Common.DFA`1.AddState(System.Enum,System.Func{`0,System.Enum})">
            <summary>
            添加一个状态到状态字典
            </summary>
            <param name="state">状态</param>
            <param name="function">处理状态的行为</param>
            <exception cref="T:System.ArgumentException">传入相同的状态时</exception>
        </member>
        <member name="M:Tatan.Common.DFA`1.Clear">
            <summary>
            清空所有状态
            </summary>
        </member>
        <member name="M:Tatan.Common.DFA`1.Run(System.Collections.Generic.IEnumerable{`0},System.Enum)">
            <summary>
            运行状态机，请确保所有状态都在状态字典中
            </summary>
            <param name="tokens"></param>
            <param name="beginState">开始状态</param>
            <exception cref="T:System.ArgumentNullException">传入参数为空时</exception>
        </member>
        <member name="M:Tatan.Common.DFA`1.CallStateFunction(`0)">
            <summary>
            状态机调用函数
            </summary>
            <param name="token"></param>
        </member>
        <member name="P:Tatan.Common.DFA`1.StateFunctions">
            <summary>
            状态机的状态字典
            </summary>
        </member>
        <member name="P:Tatan.Common.DFA`1.State">
            <summary>
            状态机运行时的状态
            </summary>
        </member>
        <member name="P:Tatan.Common.DFA`1.EndHandler">
            <summary>
            设置状态机结束的处理
            </summary>
        </member>
        <member name="M:Tatan.Common.DFA.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="capacity">状态个数</param>
        </member>
        <member name="T:Tatan.Common.Date">
            <summary>
            时间操作
            </summary>
        </member>
        <member name="M:Tatan.Common.Date.ToString(System.DateTime)">
            <summary>
            获取指定时间串(String)
            </summary>
            <param name="dt">时间</param>
            <exception cref="T:System.ArgumentOutOfRangeException">当前区域时间超出范围时</exception>
            <returns>时间串</returns>
        </member>
        <member name="M:Tatan.Common.Date.Parse(System.String)">
            <summary>
            获取指定时间(DateTime)
            </summary>
            <param name="time">时间串</param>
            <returns>时间</returns>
        </member>
        <member name="P:Tatan.Common.Date.Now">
            <summary>
            获取当前时间串
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">当前区域时间超出范围时</exception>
        </member>
        <member name="T:Tatan.Common.IObject">
            <summary>
            对象接口，提供对象通用方法
            </summary>
        </member>
        <member name="M:Tatan.Common.IObject.Equals(System.Object)">
            <summary>
            是否与另一个对象完全相等
            </summary>
            <param name="obj">另一个对象</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:Tatan.Common.IObject.GetHashCode">
            <summary>
            获取对象的hash码，如果两个对象相等，则hash码一定相等
            </summary>
            <returns>hash码</returns>
        </member>
        <member name="M:Tatan.Common.IObject.ToString">
            <summary>
            获取对象的字符串描述
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">当字符串超过最大长度时抛出</exception>
            <returns>对象的字符串描述</returns>
        </member>
        <member name="T:Tatan.Common.XmlParser">
            <summary>
            Xml解析类
            </summary>
        </member>
        <member name="M:Tatan.Common.XmlParser.GetRoot(System.String)">
            <summary>
            解析xml文件
            </summary>
            <param name="filename">文件名</param>
            <exception cref="T:System.Xml.XmlException">加载或者分析错误时</exception>
            <exception cref="T:System.ArgumentException">参数非法时</exception>
            <exception cref="T:System.ArgumentNullException">参数为空时</exception>
            <exception cref="T:System.IO.PathTooLongException">路径超长时</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">路径无效时</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误时</exception>
            <exception cref="T:System.UnauthorizedAccessException">访问失败时</exception>
            <exception cref="T:System.IO.FileNotFoundException">文件未找到时</exception>
            <exception cref="T:System.NotSupportedException">文件不支持时</exception>
            <exception cref="T:System.Security.SecurityException">没有权限时</exception>
            <returns>Xml文档</returns>
        </member>
        <member name="T:Tatan.Common.IDentityObject">
            <summary>
            可识别的对象接口
            </summary>
        </member>
        <member name="P:Tatan.Common.IDentityObject.Name">
            <summary>
            标识对象的名称
            </summary>
        </member>
        <member name="T:Tatan.Common.IDentityObject`1">
            <summary>
            可识别的对象接口
            </summary>
        </member>
        <member name="P:Tatan.Common.IDentityObject`1.Name">
            <summary>
            标识对象的名称
            </summary>
        </member>
        <member name="T:Tatan.Common.IPropertyChanged">
            <summary>
            属性变更通知接口
            </summary>
        </member>
        <member name="E:Tatan.Common.IPropertyChanged.PropertyChanged">
            <summary>
            当属性发生改变时的通知行为
            </summary>
        </member>
        <member name="T:Tatan.Common.IClearable">
            <summary>
            可清除接口
            </summary>
        </member>
        <member name="M:Tatan.Common.IClearable.Clear">
            <summary>
            清楚对象内数据
            </summary>
        </member>
    </members>
</doc>
